# Intersection of 2 lists

# l1 = [1,2,3,4]
# l2 = [3,4,5,6]

# d = []

# for i in l1:
#     for j in l2:
#         if i == j and i not in d:
#             d.append(i)
# print(d)



# decorator code

# def data_demo(func):
#     def wrapper(a,b):
#         result = func(a,b)
#         return result
#     return wrapper


# @data_demo
# def data(x,y):
#     return x+y

# print(data(3,5))



# reverse the string

# s = "hello"
# data = ""
# for i in s:
#     data = i + data
# print(data)



# find the number prime or not 

# n =27
# if n <= 1:
#     print('Not Prime')
# else:
#     is_prime = True

#     for i in range(2,n):
#         if n % i == 0:
#             is_prime = False
#             break
#     if is_prime:
#         print('Prime Number')
#     else:
#         print('Not Prime')


# max values in list

# r = [3, 7, 2, 9, 4]
# max = r[0]
# for i in range(1,len(r)):
#     if r[i] > max:
#         max = r[i]
        
# print(max)



# Fibonacci value of that number 

# n = 5
# data = 1

# while n > 0:
#     data = data * n
#     n -= 1
# print(data)



# palindrome or not

# s = "data"
# i = 0
# j = len(s) -1
# is_palindrome = True
# while i < j:
#     if s[i] != s[j]:
#         is_palindrome = False
#         break
#     i += 1
#     j -= 1
# if is_palindrome:
#     print('Palindrome')
# else:
#     print('Not Palindrome')



# sum of all in string

# n = input('enter the numbers: ')
# sum = 0
# for i in str(n):
#     sum = sum + int(i)
# print(sum)




# count frequency of each character and find the first non repeating character in string

# s= "aabbccddefg"

# d = {}

# for i in s:
#     if i not in d:
#         d[i] = 1
#     else:
#         d[i] += 1
# for j in d:
#     print(j,':',d[j])
    
# for j in s:
#     if d[j] == 1:
#         print(j)
#         break
    
    
# target problem 

# arr = [1, 3, 2, 2, 4]
# target = 4

# for i in range(len(arr)):
#     for j in range(i+1, len(arr)):
#         if arr[i] + arr[j] == target:
#             print(arr[i], arr[j])
            
            
          
# second highest values identify

# arr = [10, 20, 5, 8, 30]

# max1 = arr[0]
# max2 = arr[0]
           
# for i in range(1, len(arr)):
#     if arr[i] > max1:
#         max2 = max1
#         max1 = arr[i]
#     elif arr[i] > max2 and arr[i] != max1:
#         max2 = arr[i]
# print(max2)


            

nested = [[1, 2], [3, 4, [7, 8, 9, [10, 11, 12], 13]], [5, 6]]
flat_list = []
stack = nested[::-1]

while stack:
    item = stack.pop()
    if isinstance(item, list):
        stack.extend(item[::-1])
    else:
        flat_list.append(item)

print(flat_list)



def longestCommonPrefix(s):
    if not s:
        return '' 
    data = s[0]
    for i in s[1:]:
        while not i.startswith(data):
            data = data[:-1]
            if not data:
                return ''
    return data

s = ["flower","flow","flight"]
print(longestCommonPrefix(s))


nested = [[1, 2], [3, 4, [7, 8, 9, [10, 11, 12], 13]], [5, 6]]
flat = []

def flatten(lst):
    for item in lst:
        if isinstance(item, list):
            flatten(item)
        else:
            flat.append(item)

flatten(nested)
print(flat)


s = "abc"
permutations = []

for i in range(0, len(s)):
    for j in range(0, len(s)):
        for k in range(0, len(s)):
            if i != j and j != k and i != k:
                temp = s[i] + s[j] + s[k]
                permutations += [temp]

print("Permutations of 'abc':")
for p in permutations:
    print(p)
    
    
    

nums = [1, 2, 3]
permutations = []

for i in range(len(nums)):
    for j in range(len(nums)):
        for k in range(len(nums)):
            if i != j and j != k and i != k:
                permutations += [[nums[i], nums[j], nums[k]]]

print("Permutations:")
for p in permutations:
    print(p)



